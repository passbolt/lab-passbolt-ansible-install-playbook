
- name: Generate GPG key for Passbolt
  shell: |
    sudo su -s /bin/bash -c 'GNUPGHOME=/var/lib/passbolt/.gnupg gpg --batch --no-tty --gen-key <<EOF
      Key-Type: default
      Key-Length: 3072
      Subkey-Type: default
      Subkey-Length: 3072
      Name-Real: {{ server_gpg_name_real }}
      Name-Email: {{ server_gpg_name_email }}
      Expire-Date: 0
      %no-protection
      %commit
    EOF' {{ webserver_user }}

- name: Set permissions on /var/lib/passbolt/.gnupg directory
  become: true
  file:
    path: /var/lib/passbolt/.gnupg
    owner: "{{ webserver_user }}"
    group: "{{ webserver_user }}"
    mode: '0700'

- name: Export GPG private key
  become: true
  shell: |
    sudo su -s /bin/bash -c "GNUPGHOME=/var/lib/passbolt/.gnupg gpg --armor --export-secret-keys {{ server_gpg_name_email }} > /etc/passbolt/gpg/serverkey_private.asc" {{ webserver_user }}
  args:
    creates: /etc/passbolt/gpg/serverkey_private.asc

- name: Export GPG public key
  become: true
  shell: |
    sudo su -s /bin/bash -c "GNUPGHOME=/var/lib/passbolt/.gnupg gpg --armor --export {{ server_gpg_name_email }} > /etc/passbolt/gpg/serverkey.asc" {{ webserver_user }}
  args:
    creates: /etc/passbolt/gpg/serverkey.asc

- name: Set permissions on GPG keys
  become: true
  file:
    path: "{{ item }}"
    owner: "{{ webserver_user }}"
    group: "{{ webserver_user }}"
    mode: '0640'
  with_items:
    - /etc/passbolt/gpg/serverkey.asc
    - /etc/passbolt/gpg/serverkey_private.asc

- name: Get GPG fingerprint
  become: true
  shell: |
    sudo su -s /bin/bash -c "GNUPGHOME=/var/lib/passbolt/.gnupg gpg --fingerprint {{ server_gpg_name_email }}" {{ webserver_user }}
  register: gpg_fingerprint_extracted

- name: Extract GPG fingerprint
  set_fact:
    gpg_fingerprint: "{{ gpg_fingerprint_extracted.stdout_lines[1].replace(' ', '').replace('  ', '') }}"

- name: Create Passbolt configuration file
  template:
    src: templates/passbolt/passbolt.php.j2
    dest: /etc/passbolt/passbolt.php
    owner: "{{ webserver_user }}"
    group: "{{ webserver_user }}"
    mode: '0644'

- name: Ensure correct permissions on /etc/passbolt/jwt directory
  become: true
  file:
    path: /etc/passbolt/jwt
    owner: root
    group: "{{ webserver_user }}"
    mode: '0750'

- name: Import Subscription Key (Passbolt PRO)
  when: passbolt_edition == "pro"
  become: true
  copy:
    content: "{{ subscription_key_content }}"
    dest: /etc/passbolt/subscription_key.txt
    owner: "{{ webserver_user }}"
    group: "{{ webserver_user }}"
    mode: '0640'


- name: Run Passbolt installation with admin account
  become: true
  shell: |
    sudo su -s /bin/bash -c "GNUPGHOME=/var/lib/passbolt/.gnupg /usr/share/php/passbolt/bin/cake passbolt install \
    --admin-first-name "{{ passbolt_admin_first_name }}" \
    --admin-last-name "{{ passbolt_admin_last_name }}" \
    --admin-username "{{ passbolt_admin_email }}" \
    --force" {{ webserver_user }}
  register: install_output

- name: Extract registration URL from Passbolt install output
  set_fact:
    registration_url: "{{ install_output.stdout | regex_search('https://[a-zA-Z0-9./_-]+') }}"
  ignore_errors: yes
